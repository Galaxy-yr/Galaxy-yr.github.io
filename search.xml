<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>给OIer节约5s的快速创建子目录的程序</title>
      <link href="/2019/10/13/gei-oier-jie-yue-5s-de-kuai-su-chuang-jian-zi-mu-lu-de-cheng-xu/"/>
      <url>/2019/10/13/gei-oier-jie-yue-5s-de-kuai-su-chuang-jian-zi-mu-lu-de-cheng-xu/</url>
      
        <content type="html"><![CDATA[<p>每次考试考完的时候教练都会要求建立子目录，然后又会在这个时候浪费我们生命中美好的5s，这个时候，这个轮子孕育而生，有了它，你就比其他人多拥有了5s的美好时光～</p><p>用法：在选手文件夹下输入Mkdir回车，即可为当前文件夹的所有cpp文件创建一个文件夹，同时把文件复制进去</p><p>方法: 复制以下内容到一个叫做”Mkdir”的文件里<br><a href="https://www.galaxyyr.xyz" target="_blank" rel="noopener">宣传一波个人博客</a></p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">==</span> <span class="token string">"-h"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"---------------------------------------------------------------------------------"</span>    <span class="token keyword">echo</span>    <span class="token keyword">echo</span> <span class="token string">"-h  --help         输出此帮助界面"</span>    <span class="token keyword">echo</span> <span class="token string">"-a  --ask          按询问模式执行"</span>    <span class="token keyword">echo</span> <span class="token string">"-q  --quiet        安静的执行程序"</span>    <span class="token keyword">echo</span> <span class="token string">"-c  --copy         仅仅将文件复制进文件夹"</span>    <span class="token keyword">echo</span> <span class="token string">"文件名             shell默认跳出参数 并将后面的变量不创建文件夹(且删除此文件目录)"</span>    <span class="token keyword">echo</span>    <span class="token keyword">echo</span> <span class="token string">"例： Mkdir a.cpp b.cpp"</span>    <span class="token keyword">echo</span>    <span class="token keyword">echo</span> <span class="token string">"这将不会为a.cpp b.cpp创建目录，且如果也会删掉和文件 询问模式除外"</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[;31m默认复制并替换文件 \033[;0m"</span>    <span class="token keyword">echo</span>    <span class="token keyword">echo</span> <span class="token string">"---------------------------------------------------------------------------------"</span>    <span class="token keyword">exit</span> 0<span class="token keyword">fi</span>ask<span class="token operator">=</span>0quiet<span class="token operator">=</span>0copy<span class="token operator">=</span>0<span class="token keyword">while</span> <span class="token function">getopts</span> ayqc opt<span class="token keyword">do</span>    <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$opt</span>"</span> <span class="token keyword">in</span>        a<span class="token punctuation">)</span>ask<span class="token operator">=</span>1 <span class="token punctuation">;</span><span class="token punctuation">;</span>        q<span class="token punctuation">)</span>quiet<span class="token operator">=</span>1 <span class="token punctuation">;</span><span class="token punctuation">;</span>        c<span class="token punctuation">)</span>copy<span class="token operator">=</span>1 <span class="token punctuation">;</span><span class="token punctuation">;</span>        *<span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"未知的参数!"</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>    esac<span class="token keyword">done</span><span class="token keyword">if</span> <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"-"</span> <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token keyword">then</span>    <span class="token function">shift</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$ask</span> -eq 1 <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"以询问模式执行..."</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$copy</span> -eq 1 <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"以copy模式执行..."</span><span class="token keyword">fi</span><span class="token keyword">for</span> <span class="token function">file</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> *.cpp<span class="token variable">`</span></span><span class="token keyword">do</span>    pre<span class="token operator">=</span>`echo <span class="token string">"<span class="token variable">$file</span>"</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">'.'</span> -f1`    <span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -ne 0 ]</span>    <span class="token keyword">then</span>        <span class="token keyword">for</span> list <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span>        <span class="token keyword">do</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$list</span> <span class="token operator">=</span> <span class="token variable">$file</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">#if  echo "$file" | grep "$*" >/dev/null 2>&amp;1</span>            <span class="token keyword">then</span>                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$ask</span> -eq 1 <span class="token punctuation">]</span>                <span class="token keyword">then</span>                    <span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">$pre</span> <span class="token punctuation">]</span>                    <span class="token keyword">then</span>                        <span class="token keyword">echo</span> -e <span class="token string">"\033[;33m 找到 <span class="token variable">$pre</span> 文件夹，是否删除?\033[0m"</span>                        <span class="token function">read</span> -l opt                        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$opt</span> <span class="token operator">=</span> <span class="token string">'y'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$opt</span> <span class="token operator">=</span> <span class="token string">'Y'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>                        <span class="token keyword">then</span>                            <span class="token keyword">echo</span> -e <span class="token string">"\033[;31m 删除 <span class="token variable">$pre</span> 文件夹.\033[0m"</span>                            <span class="token keyword">echo</span> -e <span class="token string">"\033[;31m 删除 <span class="token variable">$file</span> 文件.\033[0m"</span>                            <span class="token keyword">echo</span>                            <span class="token function">rm</span> -rf <span class="token variable">$pre</span>                            <span class="token function">rm</span> <span class="token variable">$file</span>                        <span class="token keyword">else</span>                            <span class="token keyword">echo</span> -e <span class="token string">"\033[;32m 保留原文件夹\033[0m"</span>                        <span class="token keyword">fi</span>                    <span class="token keyword">fi</span>                <span class="token keyword">else</span>                    <span class="token keyword">echo</span> -e <span class="token string">"\033[;31m 删除 <span class="token variable">$pre</span> 文件夹.\033[0m"</span>                    <span class="token keyword">echo</span> -e <span class="token string">"\033[;31m 删除 <span class="token variable">$file</span> 文件.\033[0m"</span>                    <span class="token keyword">echo</span>                    <span class="token function">rm</span> -rf <span class="token variable">$pre</span>                    <span class="token function">rm</span> <span class="token variable">$file</span>                <span class="token keyword">fi</span>                <span class="token keyword">continue</span> 2            <span class="token keyword">fi</span>        <span class="token keyword">done</span>    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$copy</span> -eq 1 <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\033[;33m 复制 <span class="token variable">$file</span> 进入 <span class="token variable">$pre</span> 文件夹...\033[0m"</span>        <span class="token function">cp</span> <span class="token variable">$file</span> <span class="token variable">$pre</span>        <span class="token keyword">continue</span>    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$quiet</span> -ne 1 <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\033[;32m 正在创建 '<span class="token variable">$pre</span>' 文件夹 ... \033[0m"</span>    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token string">"<span class="token variable">$pre</span>"</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$quiet</span> -ne 1 <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token keyword">echo</span> -e <span class="token string">"\033[;31m <span class="token variable">$pre</span> 文件夹已经存在 \033[0m"</span>        <span class="token keyword">fi</span>    <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$ask</span> -eq 1 <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token keyword">echo</span> -e <span class="token string">"\033[;33m 是否创建 <span class="token variable">$pre</span> 文件夹?(y/n)\033[0m"</span>            <span class="token function">read</span>  -l opt            <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$opt</span> <span class="token operator">==</span> y <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$opt</span> <span class="token operator">=</span> <span class="token string">'Y'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">then</span>                <span class="token function">mkdir</span> <span class="token string">"<span class="token variable">$pre</span>"</span>            <span class="token keyword">else</span>                <span class="token keyword">echo</span> -e <span class="token string">"\033[;33m 跳过此文件\033[0m"</span>                <span class="token keyword">continue</span>            <span class="token keyword">fi</span>        <span class="token keyword">else</span>            <span class="token function">mkdir</span> <span class="token string">"<span class="token variable">$pre</span>"</span>        <span class="token keyword">fi</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$quiet</span> -ne 1 <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token keyword">echo</span> -e <span class="token string">"\033[;37m <span class="token variable">$pre</span> 文件夹创建成功 \033[0m"</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$quiet</span> -ne 1 <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\033[;32m 正在复制 <span class="token variable">$file</span> 到 <span class="token variable">$pre</span> 文件夹 ... \033[0m"</span>    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f <span class="token string">"<span class="token variable">$pre</span>/<span class="token variable">$file</span>"</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$quiet</span> -ne 1 <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token keyword">echo</span> -e <span class="token string">"\033[;31m 文件 <span class="token variable">$file</span> 已经存在! \033[0m"</span>        <span class="token keyword">fi</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$ask</span> -eq 1 <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token keyword">echo</span> -e <span class="token string">"\033[;33m 是否强制替换?(y/n) \033[0m"</span>            <span class="token function">read</span> opt            <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$opt</span> <span class="token operator">==</span> y <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$opt</span> <span class="token operator">=</span> <span class="token string">'Y'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">then</span>                <span class="token function">cp</span> <span class="token string">"<span class="token variable">$file</span>"</span> <span class="token string">"<span class="token variable">$pre</span>"</span>            <span class="token keyword">fi</span>        <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$quiet</span> -ne 1 <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token keyword">echo</span> -e <span class="token string">"\033[;32m 强制替换文件 \033[0m"</span>        <span class="token keyword">fi</span>        <span class="token function">cp</span> <span class="token string">"<span class="token variable">$file</span>"</span> <span class="token string">"<span class="token variable">$pre</span>"</span>    <span class="token keyword">else</span>        <span class="token function">cp</span> <span class="token string">"<span class="token variable">$file</span>"</span> <span class="token string">"<span class="token variable">$pre</span>"</span>    <span class="token keyword">fi</span>    <span class="token keyword">echo</span><span class="token keyword">done</span><span class="token keyword">echo</span> -e <span class="token string">"\033[;31m 程序执行结束\033[0m"</span></code></pre><p>然后</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> 777 Mkdir<span class="token function">sudo</span> <span class="token function">mv</span> Mkdir /binMkdir -h</code></pre><p>效果图:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDUvMjUvNWNlOTAxNDM5N2JjYjc1ODQ0LnBuZw?x-oss-process=image/format,png" alt></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDUvMjUvNWNlOTAxNDJhYmFmNjYzMTI2LnBuZw?x-oss-process=image/format,png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-KD树</title>
      <link href="/2019/10/13/kd-shu-xiang-jie/"/>
      <url>/2019/10/13/kd-shu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="K-Dimension-Tree-KDT"><a href="#K-Dimension-Tree-KDT" class="headerlink" title="K-Dimension-Tree (KDT)"></a>K-Dimension-Tree (KDT)</h2><p>顾名思义，kd树其实就是多维二叉树（空间二叉树的一种特殊情况）， 里面储存着k维的点的信息，是对k维空间进行划分的一种数据结构。<br>在竞赛中一般用来解决二维空间和三维空间的信息检索</p><p>KD树可以解决以下几个任务:</p><ol><li><p>KNN问题。即查询离某个点第k邻近的点</p></li><li><p>查询最近最远（就是 KNN问题）</p></li><li><p>查询矩阵和</p></li><li><p>图像处理（与竞赛无关）</p></li></ol><p>对于KD树,我们可以把它分为两部分</p><ul><li><p><strong>KD树的构建</strong></p></li><li><p><strong>对于KNN问题的最邻近查找算法</strong></p></li></ul><h2 id="KD树的构建"><a href="#KD树的构建" class="headerlink" title="KD树的构建"></a>KD树的构建</h2><p>KD树是一种平衡二叉树，它的各种操作都与我们学过的数据结构方法相似，对于我们一点也不陌生，很好理解。（目的是使我们能完成KNN问题）</p><p>KD树的构建有两种方法：一种利用方差，一种根据维度来划分。我们在竞赛中采用后者，因为后者更方便，也更好理解（而且十分简单）。</p><p>具体操作:</p><p>对于一个k维的超平面（维度&gt;3想象不出来，就叫超平面），在KD树每一层的构建中都选择一个维度来进行划分，将<strong>k维的数据空间分为两部分</strong>，并使其尽量平衡。然后如此递归下去。</p><p>也就是说假如我们要储存n个三维的点(x,y,z)信息。</p><p>我们先按x坐标sort一遍，选出中间值 $x_{mid}$作为根节点，然后所有x比$x_{mid}$小的点在左子树，比$x_{mid}$大的在右子树。</p><p>然后左,右子树分别按照y坐标sort一遍选出中间值作为子树的根节点，接着再在子树中按照z坐标sort一遍。接着再按x坐标…以此类推。</p><p>sort顺序即为:x-&gt;y-&gt;z-&gt;x-&gt;y-&gt;z-&gt;x…</p><p>当然每一层的划分方法可以自己来决定，但一般都是按照维度$d_1,d_2,d_3…d_k$来进行划分。你也可以按照自己的顺序来进行(例如:先按$d_1$ sort两遍,再按$d_2$ sort两遍…</p><p>一维的KD树即为一颗平衡二叉树</p><p>在构建过程中我们需要一个函数来选出中间值,但我们强大的STL里已经有了这个函数,所以我们不必再去手打一个</p><pre><code>nth_element(a+start,a+nth,a+end)</code></pre><p>这个函数作用是把a数组从a[start]到a[end]中的第n大的元素放在第n个位置,且nth左边元素都比a[nth]小,右边都比a[nth]大(类似快排的一部分)</p><p>时间复杂度为O(n)</p><p>那么我们整个build的时间复杂度即为O(nlogn)</p><p>这里举个例子: 将(4,7),(9,6),(8,1),(2,3),(5,4),(7,2),构造成一颗KD树。</p><p>(这里直接复制我自己的 PPT）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTMvNWNiMTRiMjViYmEyNC5wbmc?x-oss-process=image/format,png" alt><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTMvNWNiMTg0NmMzMzc5MC5wbmc?x-oss-process=image/format,png" alt="2">)<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTMvNWNiMTg0NmJmMmJjMy5wbmc?x-oss-process=image/format,png" alt="1"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTMvNWNiMTg0NmM0MmYzOS5wbmc?x-oss-process=image/format,png" alt="4"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTMvNWNiMTg0NmNlYmIzNS5wbmc?x-oss-process=image/format,png" alt="6"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTMvNWNiMTg0NmMzNTdlMC5wbmc?x-oss-process=image/format,png" alt="3"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTMvNWNiMTg0NmM0Y2E3YS5wbmc?x-oss-process=image/format,png" alt="5"></p><p>代码</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义维度数量</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>d<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//d为维度</span>        <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化</span>        <span class="token punctuation">{</span>                l<span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>Maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示按d维排序</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> now<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    d<span class="token operator">=</span>now<span class="token punctuation">;</span>    <span class="token function">nth_element</span><span class="token punctuation">(</span>tree<span class="token operator">+</span>l<span class="token punctuation">,</span>tree<span class="token operator">+</span>mid<span class="token punctuation">,</span>tree<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>mid<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token number">-1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push_up</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个函数为后面的更新操作,这里请先无视</span>    <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="最邻近算法"><a href="#最邻近算法" class="headerlink" title="最邻近算法"></a>最邻近算法</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTMvNWNiMTg2MDFhNGE4ZC5wbmc?x-oss-process=image/format,png" alt="1"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTMvNWNiMTg2MDIxMmIyZi5wbmc?x-oss-process=image/format,png" alt="3"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDQvMTMvNWNiMTg2MDFjZWEyOC5wbmc?x-oss-process=image/format,png" alt></p><p>这个时候我们每个节点就需要维护一个最大空间（二维就是最大矩阵）</p><p>这里说明就用二维说明</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> node<span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>d<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">,</span>maxn<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">,</span>minn<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//maxn为矩阵的右上角，minn为左下角</span>        <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化</span>        <span class="token punctuation">{</span>                l<span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                        maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>minn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>Maxn<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><strong>为什么要维护这个矩阵?</strong></p><p>在上图中，我们在建树时将其分为了好几个矩阵，矩阵所存的就是以它为根节点root的子树的把所有点包括进来的最小矩阵</p><p>这个矩阵代表的就相当与当前根节点的父亲f[root]划分出来的矩形，因为只有这么多个点，所以维护的矩阵就是整个平面。</p><p>例如之前(7,2)把平面划分为了左右两部分，节点(5,4)中存的矩阵就将是包括(5,4),(2,3),(4,7)的最小矩阵，也就是左边这个平面。</p><p>在找到近似点x后的画圆操作就相当于求出查询点y到x的矩阵的距离，然后比较是否比左右儿子的矩阵的距离大，如果大则可能存在点z在左右子树中比当前点距离更进。那么就去搜索。</p><p>所以我们每次直接从根节点开始搜索，再来比较就行了。</p><p>查询复杂度O$(KN^{1-1/k})$</p><p>如果还没懂的话请结合代码理解。（作者语文不好）</p><p>如需查找k邻近就直接用优先队列储存就行了</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/******************************Author:galaxy yrLANG:C++Created Time:2019年02月17日 星期日 14时28分34秒*******************************/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>d<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">,</span>maxn<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">,</span>minn<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//maxn,minn表示当前节点能维护到的矩阵</span>        <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                l<span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                        maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>minn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>Maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">,</span>root<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//更新</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> son<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> now<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>        d<span class="token operator">=</span>now<span class="token punctuation">;</span>        <span class="token function">nth_element</span><span class="token punctuation">(</span>tree<span class="token operator">+</span>l<span class="token punctuation">,</span>tree<span class="token operator">+</span>mid<span class="token punctuation">,</span>tree<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>mid<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token number">-1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span> o<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> now<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> o<span class="token operator">=</span>k<span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">&lt;</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">insert</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">insert</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">dis_min</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//曼哈顿距离</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> rst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>rst<span class="token operator">+</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>rst<span class="token operator">+</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rst<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">dis_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> rst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                rst<span class="token operator">+</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rst<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> ansmin<span class="token punctuation">,</span>ansmax<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">query_min</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> dm<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">==</span>k<span class="token punctuation">)</span>dm<span class="token operator">=</span>inf<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dm<span class="token operator">&lt;</span>ansmin<span class="token punctuation">)</span>ansmin<span class="token operator">=</span>dm<span class="token punctuation">;</span>        <span class="token keyword">int</span> dl<span class="token operator">=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">?</span><span class="token function">dis_min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">:</span>inf<span class="token punctuation">;</span>        <span class="token keyword">int</span> dr<span class="token operator">=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">?</span><span class="token function">dis_min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">:</span>inf<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dl<span class="token operator">&lt;</span>dr<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dl<span class="token operator">&lt;</span>ansmin<span class="token punctuation">)</span><span class="token function">query_min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dr<span class="token operator">&lt;</span>ansmin<span class="token punctuation">)</span><span class="token function">query_min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dr<span class="token operator">&lt;</span>ansmin<span class="token punctuation">)</span><span class="token function">query_min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dl<span class="token operator">&lt;</span>ansmin<span class="token punctuation">)</span><span class="token function">query_min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">query_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> dm<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dm<span class="token operator">></span>ansmax<span class="token punctuation">)</span>ansmax<span class="token operator">=</span>dm<span class="token punctuation">;</span>        <span class="token keyword">int</span> dl<span class="token operator">=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">?</span><span class="token function">dis_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dr<span class="token operator">=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">?</span><span class="token function">dis_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dl<span class="token operator">></span>dr<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dl<span class="token operator">></span>ansmax<span class="token punctuation">)</span><span class="token function">query_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dr<span class="token operator">></span>ansmax<span class="token punctuation">)</span><span class="token function">query_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dr<span class="token operator">></span>ansmax<span class="token punctuation">)</span><span class="token function">query_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dl<span class="token operator">></span>ansmax<span class="token punctuation">)</span><span class="token function">query_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://www.luogu.org/problemnew/show/P4357" target="_blank" rel="noopener">K远点对</a></p><p>用优先队列</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>d<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">,</span>maxn<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">,</span>minn<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//maxn,minn表示当前节点能维护到的矩阵</span>        <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                l<span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                        maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>minn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span>Maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> d<span class="token punctuation">,</span>root<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">&amp;</span> a<span class="token punctuation">,</span><span class="token keyword">const</span> Node <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> son<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> now<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>        d<span class="token operator">=</span>now<span class="token punctuation">;</span>        <span class="token function">nth_element</span><span class="token punctuation">(</span>tree<span class="token operator">+</span>l<span class="token punctuation">,</span>tree<span class="token operator">+</span>mid<span class="token punctuation">,</span>tree<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>mid<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token number">-1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">pf</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">dis</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">&amp;</span> x<span class="token punctuation">,</span><span class="token keyword">const</span> Node <span class="token operator">&amp;</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> rst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                rst<span class="token operator">+</span><span class="token operator">=</span><span class="token function">pf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rst<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">dis_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//欧式距离</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> rst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                rst<span class="token operator">+</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">pf</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">pf</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rst<span class="token punctuation">;</span><span class="token punctuation">}</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token operator">></span>Q<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">query_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> dm<span class="token operator">=</span><span class="token function">dis</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dm<span class="token operator">></span>Q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> dl<span class="token operator">=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">?</span><span class="token function">dis_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">-</span>inf<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> dr<span class="token operator">=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">?</span><span class="token function">dis_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">-</span>inf<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dl<span class="token operator">></span>dr<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dl<span class="token operator">></span>Q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">query_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dr<span class="token operator">></span>Q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">query_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dr<span class="token operator">></span>Q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">query_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dl<span class="token operator">></span>Q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">query_max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//freopen("p4357.in","r",stdin);</span>        <span class="token comment" spellcheck="true">//freopen("p4357.out","w",stdout);</span>        ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                        cin<span class="token operator">>></span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        root<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">query_max</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>Q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://www.luogu.org/problemnew/show/P4148" target="_blank" rel="noopener">简单题</a></p><p>KDT矩阵求和操作</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*******************************Author:galaxy yrLANG:C++Created Time:2019年03月14日 星期四 16时55分06秒*******************************/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">struct</span> IO<span class="token punctuation">{</span>       <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>               IO <span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span>res<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                      <span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      T q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                      <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span> <span class="token operator">or</span> ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>q<span class="token operator">=</span><span class="token operator">-</span>q<span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                      res<span class="token operator">=</span><span class="token punctuation">(</span>ch<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token string">'0'</span> <span class="token operator">and</span> ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span>                      res<span class="token operator">=</span><span class="token punctuation">(</span>res<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>res<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>ch<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      res<span class="token operator">*</span><span class="token operator">=</span>q<span class="token punctuation">;</span>                      <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">}</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token operator">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>val<span class="token punctuation">,</span>d<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">,</span>maxn<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">,</span>minn<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                l<span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> sum<span class="token operator">=</span>val<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                        maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>minn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span>Maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">&amp;</span> x<span class="token punctuation">,</span><span class="token keyword">const</span> Node <span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span>d<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&lt;</span>y<span class="token punctuation">.</span>d<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> son<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                        tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> now<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>        d<span class="token operator">=</span>now<span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">nth_element</span><span class="token punctuation">(</span>tree<span class="token operator">+</span>l<span class="token punctuation">,</span>tree<span class="token operator">+</span>mid<span class="token punctuation">,</span>tree<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>mid<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token number">-1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> o<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> now<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//if(tree[o].d[0]==tree[k].d[0] and tree[o].d[1]==tree[k].d[1]){tree[o].val+=tree[k].val;return;}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> o<span class="token operator">=</span>k<span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">&lt;</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">insert</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">else</span> <span class="token function">insert</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> xl<span class="token punctuation">,</span>yl<span class="token punctuation">,</span>xr<span class="token punctuation">,</span>yr<span class="token punctuation">,</span>n<span class="token punctuation">,</span>opt<span class="token punctuation">,</span>root<span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xr<span class="token operator">&lt;</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">or</span> xl<span class="token operator">></span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">or</span>           yr<span class="token operator">&lt;</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">or</span> yl<span class="token operator">></span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xl<span class="token operator">&lt;=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> xr<span class="token operator">>=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span>            yl<span class="token operator">&lt;=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span>  yr<span class="token operator">>=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ans<span class="token operator">+</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xl<span class="token operator">&lt;=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> xr<span class="token operator">>=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> yl<span class="token operator">&lt;=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> yr<span class="token operator">>=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">+</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token function">query</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token function">query</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//freopen("p4148.in","r",stdin);</span>        <span class="token comment" spellcheck="true">//freopen("p4148.out","w",stdout);</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                cin<span class="token operator">>></span>opt<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                        cin<span class="token operator">>></span>tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span>tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span>tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>                        tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">^</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>                        tree<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>pos<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        pos<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">%</span><span class="token number">10000</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>root<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>pos<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                        cin<span class="token operator">>></span>xl<span class="token operator">>></span>yl<span class="token operator">>></span>xr<span class="token operator">>></span>yr<span class="token punctuation">;</span>                        xl<span class="token operator">^</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>yl<span class="token operator">^</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>xr<span class="token operator">^</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>yr<span class="token operator">^</span><span class="token operator">=</span>ans<span class="token punctuation">;</span>                        ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://www.luogu.org/problemnew/show/P4475" target="_blank" rel="noopener">巧克力王国</a></p><p>有一个限制</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*******************************Author:galaxy yrLANG:C++Created Time:2019年03月06日 星期三 21时46分54秒*******************************/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">struct</span> IO<span class="token punctuation">{</span>       <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>               IO <span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span>res<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                      <span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      T q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                      <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token operator">&lt;</span><span class="token string">'0'</span> <span class="token operator">or</span> ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>q<span class="token operator">=</span><span class="token operator">-</span>q<span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                      res<span class="token operator">=</span><span class="token punctuation">(</span>ch<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token string">'0'</span> <span class="token operator">and</span> ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span>                      res<span class="token operator">=</span><span class="token punctuation">(</span>res<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>res<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>ch<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      res<span class="token operator">*</span><span class="token operator">=</span>q<span class="token punctuation">;</span>                      <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">}</span>cin<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn<span class="token operator">=</span><span class="token number">5e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>w<span class="token punctuation">,</span>d<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">,</span>minn<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">,</span>maxn<span class="token punctuation">[</span>dim<span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                l<span class="token operator">=</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> sum<span class="token operator">=</span>val<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                        minn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span>Maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token keyword">int</span> root<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span> x<span class="token punctuation">,</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span>d<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&lt;</span>y<span class="token punctuation">.</span>d<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> son<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>dim<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                        tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tree<span class="token punctuation">[</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> now<span class="token punctuation">)</span><span class="token punctuation">{</span>        d<span class="token operator">=</span>now<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>        std<span class="token operator">::</span><span class="token function">nth_element</span><span class="token punctuation">(</span>tree<span class="token operator">+</span>l<span class="token punctuation">,</span>tree<span class="token operator">+</span>mid<span class="token punctuation">,</span>tree<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">maintain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>mid<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token number">-1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">push_up</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>a<span class="token operator">+</span>y<span class="token operator">*</span>b<span class="token operator">&lt;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> q<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>maxn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>minn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ans<span class="token operator">+</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ans<span class="token operator">+</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token function">query</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token function">query</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//freopen("p4475.in","r",stdin);</span>        <span class="token comment" spellcheck="true">//freopen("p4475.out","w",stdout);</span>        cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                cin<span class="token operator">>></span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>        root<span class="token operator">=</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>                ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KD树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鲳数-数位dp</title>
      <link href="/2019/10/13/chang-shu-shu-wei-dp/"/>
      <url>/2019/10/13/chang-shu-shu-wei-dp/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzEwLzEwL3U3WjZOZC5wbmc?x-oss-process=image/format,png" alt></p><p>数据范围为$\mathtt{L,R \leq 10^{500000}}$</p><h2 id="题解与思路历程"><a href="#题解与思路历程" class="headerlink" title="题解与思路历程"></a>题解与思路历程</h2><p>这一看数据范围就能想到<font size="5">数位dp</font></p><p>然后数位dp都是套路差不多的方法。</p><p>考虑快速计算1 ~ n的答案，那么可以简单的用1 ~ R的答案减去1 ~ L-1的答案即可。</p><p>首先可以写出如下的框架：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> lim<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//now:当前dp到第几位,前一位是否有限制</span><span class="token comment" spellcheck="true">//根据题目，还需要求出前面位中的逆序对。</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lim<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>len<span class="token operator">-</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//没有限制则直接计算答案</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">==</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> ans<span class="token operator">+</span><span class="token operator">=</span>sum<span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//一直到末位了，计算答案</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//继续递归限制</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//递归没有限制</span><span class="token punctuation">}</span></code></pre><p>考虑怎么求$count()$函数。</p><p>$count()$函数需要做的就是求出剩下所有位随便填相互造成的”鲳对”数,以及对前面已经选择的数 造成的”鲳对”数</p><ul><li>对于前者</li></ul><p>考虑怎么求1 ~ $10^{len}$中的所有”鲳对”：</p><p>若$len \leq 1$,则无”鲳对”</p><p>否则：</p><p>考虑第$i$位摆$x$，右边的$n-i$位上任意的某一位若摆小于$x$的数，则有一个”鲳对”</p><p>因为$x=0…9$,右边某一位的取值分别为$0…1,0…2,…,0…8$</p><p>所以对于第$i$位，右边某一位的取值方案有$45$种,一共有$45 \times (len-i)$种,每一位单独考虑<br>其余位置都有$10^{len-2}$的放数方法。</p><p>所以答案应该为</p><p>$$<br>\sum_{i=1}^{len}{45 \times (len-i) \times 10^{len-2}}<br>$$</p><p>设上面这玩意儿为$s[len]$,显然可以$O(n)$预处理出$s$数组。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ten<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5e5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ten<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ten<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10LL</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>        t<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        t<span class="token operator">%</span><span class="token operator">=</span>mod<span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1ll</span><span class="token operator">*</span>x<span class="token operator">*</span>ten<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token operator">*</span>t<span class="token operator">%</span>mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>对于后者</li></ul><p>我们设$gs[0$~$9]$表示前面已经选择了有哪些数(gs=个数),后面还剩$len$个位置</p><p>对于$gs[i]$显然有”鲳对”$=gs[i] \times 10^{len-1} \times i \times len$</p><p>所以得出$count()$函数为:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    ans<span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">></span>mod<span class="token punctuation">)</span> ans<span class="token operator">-</span><span class="token operator">=</span>mod<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token number">1ll</span><span class="token operator">*</span>gs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>ten<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">*</span>i<span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>但这样我们还漏掉了一个地方的贡献（就是这个地方导致我调了1h!!!)</li></ul><p>那就是我们在dp时已知前面确定了的数字之间的”鲳对”为$sum$,那么后面我们不管怎么填都有至少$sum$个”鲳对”。</p><p>只要考虑好以上几点我们就可以很好的写出dp的所有部分了，最后记得是计算$L-1$的贡献</p><h2 id="mathcal-Code"><a href="#mathcal-Code" class="headerlink" title="$\mathcal{Code}$"></a>$\mathcal{Code}$</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*******************************Author:galaxy yrLANG:C++Created Time:2019年10月09日 星期三 14时16分22秒*******************************/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">define</span> int long long</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span>id<span class="token punctuation">,</span>ten<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>gs<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>len<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">,</span>res<span class="token punctuation">;</span>string ss<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ten<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5e5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ten<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ten<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10LL</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>        t<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        t<span class="token operator">%</span><span class="token operator">=</span>mod<span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1ll</span><span class="token operator">*</span>x<span class="token operator">*</span>ten<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token operator">*</span>t<span class="token operator">%</span>mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    ans<span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">></span>mod<span class="token punctuation">)</span> ans<span class="token operator">-</span><span class="token operator">=</span>mod<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token number">1ll</span><span class="token operator">*</span>gs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>ten<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">*</span>i<span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> lim<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//没有限制，则计算答案</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lim<span class="token punctuation">)</span> <span class="token punctuation">{</span> ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token punctuation">(</span>sum<span class="token operator">*</span>ten<span class="token punctuation">[</span>len<span class="token operator">-</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span>len<span class="token operator">-</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">==</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> ans<span class="token operator">+</span><span class="token operator">=</span>sum<span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">int</span> c<span class="token operator">=</span>ss<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">,</span>tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先考虑有限制</span>    <span class="token punctuation">{</span>        gs<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp<span class="token operator">+</span><span class="token operator">=</span>gs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            tmp<span class="token operator">%</span><span class="token operator">=</span>mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dp</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>tmp<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>        gs<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//考虑没有限制</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        gs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            tmp<span class="token operator">+</span><span class="token operator">=</span>gs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dp</span><span class="token punctuation">(</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>tmp<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>        gs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//计算L这个数的"鲳对"</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> c<span class="token operator">=</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>        gs<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            ans<span class="token operator">-</span><span class="token operator">=</span>gs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        gs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("pair.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("pair.out","w",stdout);</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>T<span class="token operator">>></span>id<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">=</span>res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        cin<span class="token operator">>></span>ss<span class="token punctuation">;</span>        len<span class="token operator">=</span>ss<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ss<span class="token operator">=</span><span class="token string">"$"</span><span class="token operator">+</span>ss<span class="token punctuation">;</span>        <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token operator">=</span>ans<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        cin<span class="token operator">>></span>ss<span class="token punctuation">;</span>        len<span class="token operator">=</span>ss<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ss<span class="token operator">=</span><span class="token string">"$"</span><span class="token operator">+</span>ss<span class="token punctuation">;</span>        <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ans<span class="token operator">-</span>res<span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一定要记得开<code>long long</code>,考试时就是这个原因导致$WA$和$RE$</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数位dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决斗-异或最小生成树</title>
      <link href="/2019/10/13/ti-jie-jue-dou-yi-huo-zui-xiao-sheng-cheng-shu/"/>
      <url>/2019/10/13/ti-jie-jue-dou-yi-huo-zui-xiao-sheng-cheng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMDcvNXh3cUZsM1JvaERKN2I4LnBuZw?x-oss-process=image/format,png" alt>]</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>可以发现，若将武士之间的决斗了的人连一条边，可以构成一颗树，边权为$a_u \bigoplus a_v$</p><p>同时要求边权最小，即最小生成树，但暴力跑出每条边是$n^2$的，所以考虑用$Trie$来优化。</p><p>首先有个贪心思想:若$a_i = a_j$,则$i,j$连边，接着按二进制位来贪心连边。</p><p>所以考虑建一颗$Trie$，从叶子节点开始合并联通块，对于$Trie$的某个节点的两个儿子所在的</p><p>联通块内找一条权值最小的边连接即可。</p><p>p.s.</p><p>mmp考试时sb一般地先开了一颗$Trie$,然后又动态开点合并$Trie$,$RE+MLE$,%$#@^#!@!!!</p><p>结果:$100 -&gt; 50$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*******************************Author:galaxy yrLANG:C++Created Time:2019年10月07日 星期一 09时01分15秒*******************************/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> int long long</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> IO<span class="token punctuation">{</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>    IO <span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span>res<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        T q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token string">'0'</span> <span class="token operator">or</span> ch<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>q<span class="token operator">=</span><span class="token operator">-</span>q<span class="token punctuation">;</span>        res<span class="token operator">=</span><span class="token punctuation">(</span>ch<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token string">'0'</span> <span class="token operator">and</span> ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span> res<span class="token operator">=</span><span class="token punctuation">(</span>res<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>res<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>ch<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token operator">*</span><span class="token operator">=</span>q<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>cin<span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>    <span class="token keyword">signed</span> to<span class="token punctuation">,</span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> w<span class="token punctuation">;</span>    <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> nx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">to</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">next</span><span class="token punctuation">(</span>nx<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">w</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> edge <span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> w<span class="token operator">&lt;</span>p<span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">signed</span> maxn<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> LG<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Lg<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">1e18</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MI<span class="token operator">=</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span>Lg<span class="token punctuation">;</span><span class="token keyword">signed</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>tot<span class="token punctuation">,</span>depth<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>LG<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>w<span class="token punctuation">,</span>mx<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>LG<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>edge e<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> Trie<span class="token punctuation">{</span>    <span class="token keyword">signed</span> ch<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tot<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> _id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> c<span class="token punctuation">,</span>now<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>Lg<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            c<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span>i<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>            now<span class="token operator">=</span>ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>id<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span>            id<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span>_id<span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>_id<span class="token punctuation">,</span>id<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span>_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">,</span><span class="token keyword">int</span> mi<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">></span>w<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mi<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">></span>val<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                w<span class="token operator">=</span>val<span class="token punctuation">,</span>u<span class="token operator">=</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token operator">=</span>id<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> ch<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">query</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ch<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token punctuation">,</span>mi<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> ch<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">query</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ch<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token punctuation">,</span>mi<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> ch<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">query</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ch<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token operator">|</span>mi<span class="token punctuation">,</span>mi<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> ch<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">query</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ch<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token operator">|</span>mi<span class="token punctuation">,</span>mi<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">,</span><span class="token keyword">int</span> mi<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token punctuation">,</span>mi<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">solve</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token operator">|</span>mi<span class="token punctuation">,</span>mi<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w<span class="token operator">=</span>inf<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">query</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ch<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mi<span class="token punctuation">,</span>mi<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token operator">+</span><span class="token operator">=</span>w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">)</span><span class="token punctuation">{</span>    depth<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span>depth<span class="token punctuation">[</span>f<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>LG<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mx<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mx<span class="token punctuation">[</span>f<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token operator">!=</span>f<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>now<span class="token punctuation">;</span>            mx<span class="token punctuation">[</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">LCA</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>depth<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;</span>depth<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>LG<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>depth<span class="token punctuation">[</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>=</span>depth<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>            res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>mx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>LG<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>mx<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">=</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mx<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("fight.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("fight.out","w",stdout);</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>Trie<span class="token operator">::</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    Trie<span class="token operator">::</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>MI<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>u<span class="token operator">>></span>v<span class="token operator">>></span>w<span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">^</span>a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>w<span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">LCA</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token operator">+</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token operator">-</span>tmp<span class="token punctuation">,</span><span class="token number">0ll</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异或最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
